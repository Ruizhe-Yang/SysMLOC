/*
 * generated by Xtext 2.38.0
 */
package dut.control.sysmloc.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dut.control.sysmloc.ide.contentassist.antlr.internal.InternalSysMLOCParser;
import dut.control.sysmloc.services.SysMLOCGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SysMLOCParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SysMLOCGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SysMLOCGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getNameAccess().getAlternatives(), "rule__Name__Alternatives");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getPartUsageAccess().getGroup(), "rule__PartUsage__Group__0");
			builder.put(grammarAccess.getPartDefinitionAccess().getGroup(), "rule__PartDefinition__Group__0");
			builder.put(grammarAccess.getQualificationAccess().getGroup(), "rule__Qualification__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getNamespaceAccess().getPackagesAssignment(), "rule__Namespace__PackagesAssignment");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getPackageAccess().getElementsAssignment_3(), "rule__Package__ElementsAssignment_3");
			builder.put(grammarAccess.getCommentAccess().getBodyAssignment_1(), "rule__Comment__BodyAssignment_1");
			builder.put(grammarAccess.getImportAccess().getVisibilityAssignment_0(), "rule__Import__VisibilityAssignment_0");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_2(), "rule__Import__NameAssignment_2");
			builder.put(grammarAccess.getPartUsageAccess().getNameAssignment_1(), "rule__PartUsage__NameAssignment_1");
			builder.put(grammarAccess.getPartDefinitionAccess().getNameAssignment_2(), "rule__PartDefinition__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SysMLOCGrammarAccess grammarAccess;

	@Override
	protected InternalSysMLOCParser createParser() {
		InternalSysMLOCParser result = new InternalSysMLOCParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_NOTE", "RULE_SL_NOTE" };
	}

	public SysMLOCGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SysMLOCGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
