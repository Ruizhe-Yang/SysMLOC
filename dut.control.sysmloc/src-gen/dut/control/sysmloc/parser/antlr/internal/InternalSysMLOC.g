/*
 * generated by Xtext 2.38.0
 */
grammar InternalSysMLOC;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dut.control.sysmloc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dut.control.sysmloc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dut.control.sysmloc.services.SysMLOCGrammarAccess;

}

@parser::members {

 	private SysMLOCGrammarAccess grammarAccess;

    public InternalSysMLOCParser(TokenStream input, SysMLOCGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Namespace";
   	}

   	@Override
   	protected SysMLOCGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleNamespace
entryRuleNamespace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamespaceRule()); }
	iv_ruleNamespace=ruleNamespace
	{ $current=$iv_ruleNamespace.current; }
	EOF;

// Rule Namespace
ruleNamespace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNamespaceAccess().getPackagesPackageParserRuleCall_0());
			}
			lv_packages_0_0=rulePackage
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNamespaceRule());
				}
				add(
					$current,
					"packages",
					lv_packages_0_0,
					"dut.control.sysmloc.SysMLOC.Package");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current; }
	EOF;

// Rule Package
rulePackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getDeclaredNameQualifiedNameParserRuleCall_1_0());
				}
				lv_declaredName_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					set(
						$current,
						"declaredName",
						lv_declaredName_1_0,
						"dut.control.sysmloc.SysMLOC.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getElementsBaseElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleBaseElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"dut.control.sysmloc.SysMLOC.BaseElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackageAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBaseElement
entryRuleBaseElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseElementRule()); }
	iv_ruleBaseElement=ruleBaseElement
	{ $current=$iv_ruleBaseElement.current; }
	EOF;

// Rule BaseElement
ruleBaseElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBaseElementAccess().getPackageParserRuleCall_0());
		}
		this_Package_0=rulePackage
		{
			$current = $this_Package_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseElementAccess().getAnnotatingElementParserRuleCall_1());
		}
		this_AnnotatingElement_1=ruleAnnotatingElement
		{
			$current = $this_AnnotatingElement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseElementAccess().getImportElementParserRuleCall_2());
		}
		this_ImportElement_2=ruleImportElement
		{
			$current = $this_ImportElement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseElementAccess().getDefinitionElementParserRuleCall_3());
		}
		this_DefinitionElement_3=ruleDefinitionElement
		{
			$current = $this_DefinitionElement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseElementAccess().getUsageElementParserRuleCall_4());
		}
		this_UsageElement_4=ruleUsageElement
		{
			$current = $this_UsageElement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBaseElementAccess().getTBDParserRuleCall_5());
		}
		this_TBD_5=ruleTBD
		{
			$current = $this_TBD_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnnotatingElement
entryRuleAnnotatingElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotatingElementRule()); }
	iv_ruleAnnotatingElement=ruleAnnotatingElement
	{ $current=$iv_ruleAnnotatingElement.current; }
	EOF;

// Rule AnnotatingElement
ruleAnnotatingElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAnnotatingElementAccess().getCommentParserRuleCall());
	}
	this_Comment_0=ruleComment
	{
		$current = $this_Comment_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleImportElement
entryRuleImportElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportElementRule()); }
	iv_ruleImportElement=ruleImportElement
	{ $current=$iv_ruleImportElement.current; }
	EOF;

// Rule ImportElement
ruleImportElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getImportElementAccess().getNamespaceImportParserRuleCall());
	}
	this_NamespaceImport_0=ruleNamespaceImport
	{
		$current = $this_NamespaceImport_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleDefinitionElement
entryRuleDefinitionElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionElementRule()); }
	iv_ruleDefinitionElement=ruleDefinitionElement
	{ $current=$iv_ruleDefinitionElement.current; }
	EOF;

// Rule DefinitionElement
ruleDefinitionElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDefinitionElementAccess().getAttributeDefinitionParserRuleCall_0());
		}
		this_AttributeDefinition_0=ruleAttributeDefinition
		{
			$current = $this_AttributeDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefinitionElementAccess().getPartDefinitionParserRuleCall_1());
		}
		this_PartDefinition_1=rulePartDefinition
		{
			$current = $this_PartDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUsageElement
entryRuleUsageElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUsageElementRule()); }
	iv_ruleUsageElement=ruleUsageElement
	{ $current=$iv_ruleUsageElement.current; }
	EOF;

// Rule UsageElement
ruleUsageElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getUsageElementAccess().getNonOccurrenceUsageElementParserRuleCall());
	}
	this_NonOccurrenceUsageElement_0=ruleNonOccurrenceUsageElement
	{
		$current = $this_NonOccurrenceUsageElement_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleNonOccurrenceUsageElement
entryRuleNonOccurrenceUsageElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNonOccurrenceUsageElementRule()); }
	iv_ruleNonOccurrenceUsageElement=ruleNonOccurrenceUsageElement
	{ $current=$iv_ruleNonOccurrenceUsageElement.current; }
	EOF;

// Rule NonOccurrenceUsageElement
ruleNonOccurrenceUsageElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getNonOccurrenceUsageElementAccess().getAttributeUsageParserRuleCall());
	}
	this_AttributeUsage_0=ruleAttributeUsage
	{
		$current = $this_AttributeUsage_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleNamespaceImport
entryRuleNamespaceImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamespaceImportRule()); }
	iv_ruleNamespaceImport=ruleNamespaceImport
	{ $current=$iv_ruleNamespaceImport.current; }
	EOF;

// Rule NamespaceImport
ruleNamespaceImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNamespaceImportAccess().getVisibilityQualifiedNameParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamespaceImportRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"dut.control.sysmloc.SysMLOC.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='import'
		{
			newLeafNode(otherlv_1, grammarAccess.getNamespaceImportAccess().getImportKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNamespaceImportAccess().getDeclaredNameQualifiedNameParserRuleCall_2_0());
				}
				lv_declaredName_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamespaceImportRule());
					}
					set(
						$current,
						"declaredName",
						lv_declaredName_2_0,
						"dut.control.sysmloc.SysMLOC.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getNamespaceImportAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	iv_ruleComment=ruleComment
	{ $current=$iv_ruleComment.current; }
	EOF;

// Rule Comment
ruleComment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='doc'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommentAccess().getDocKeyword_0());
		}
		(
			(
				lv_body_1_0=RULE_REGULAR_COMMENT
				{
					newLeafNode(lv_body_1_0, grammarAccess.getCommentAccess().getBodyREGULAR_COMMENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommentRule());
					}
					setWithLastConsumed(
						$current,
						"body",
						lv_body_1_0,
						"dut.control.sysmloc.SysMLOC.REGULAR_COMMENT");
				}
			)
		)
	)
;

// Entry rule entryRuleAttributeDefinition
entryRuleAttributeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeDefinitionRule()); }
	iv_ruleAttributeDefinition=ruleAttributeDefinition
	{ $current=$iv_ruleAttributeDefinition.current; }
	EOF;

// Rule AttributeDefinition
ruleAttributeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeDefinitionAccess().getAttributeKeyword_0());
		}
		otherlv_1='def'
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeDefinitionAccess().getDefKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getDeclaredNameQualifiedNameParserRuleCall_2_0());
				}
				lv_declaredName_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
					}
					set(
						$current,
						"declaredName",
						lv_declaredName_2_0,
						"dut.control.sysmloc.SysMLOC.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getAttributeDefinitionAccess().getSemicolonKeyword_3_0());
			}
			    |
			(
				otherlv_4='{'
				{
					newLeafNode(otherlv_4, grammarAccess.getAttributeDefinitionAccess().getLeftCurlyBracketKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getElementsBaseElementParserRuleCall_3_1_1_0());
						}
						lv_elements_5_0=ruleBaseElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
							}
							add(
								$current,
								"elements",
								lv_elements_5_0,
								"dut.control.sysmloc.SysMLOC.BaseElement");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_6='}'
				{
					newLeafNode(otherlv_6, grammarAccess.getAttributeDefinitionAccess().getRightCurlyBracketKeyword_3_1_2());
				}
			)
		)
	)
;

// Entry rule entryRulePartDefinition
entryRulePartDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPartDefinitionRule()); }
	iv_rulePartDefinition=rulePartDefinition
	{ $current=$iv_rulePartDefinition.current; }
	EOF;

// Rule PartDefinition
rulePartDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='part'
		{
			newLeafNode(otherlv_0, grammarAccess.getPartDefinitionAccess().getPartKeyword_0());
		}
		otherlv_1='def'
		{
			newLeafNode(otherlv_1, grammarAccess.getPartDefinitionAccess().getDefKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPartDefinitionAccess().getDeclaredNameQualifiedNameParserRuleCall_2_0());
				}
				lv_declaredName_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPartDefinitionRule());
					}
					set(
						$current,
						"declaredName",
						lv_declaredName_2_0,
						"dut.control.sysmloc.SysMLOC.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getPartDefinitionAccess().getSemicolonKeyword_3());
		}
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getPartDefinitionAccess().getSemicolonKeyword_4_0());
			}
			    |
			(
				otherlv_5='{'
				{
					newLeafNode(otherlv_5, grammarAccess.getPartDefinitionAccess().getLeftCurlyBracketKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPartDefinitionAccess().getElementsBaseElementParserRuleCall_4_1_1_0());
						}
						lv_elements_6_0=ruleBaseElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPartDefinitionRule());
							}
							add(
								$current,
								"elements",
								lv_elements_6_0,
								"dut.control.sysmloc.SysMLOC.BaseElement");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_7='}'
				{
					newLeafNode(otherlv_7, grammarAccess.getPartDefinitionAccess().getRightCurlyBracketKeyword_4_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleAttributeUsage
entryRuleAttributeUsage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeUsageRule()); }
	iv_ruleAttributeUsage=ruleAttributeUsage
	{ $current=$iv_ruleAttributeUsage.current; }
	EOF;

// Rule AttributeUsage
ruleAttributeUsage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeUsageAccess().getAttributeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeUsageAccess().getDeclaredNameQualifiedNameParserRuleCall_1_0());
				}
				lv_declaredName_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeUsageRule());
					}
					set(
						$current,
						"declaredName",
						lv_declaredName_1_0,
						"dut.control.sysmloc.SysMLOC.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getAttributeUsageAccess().getSemicolonKeyword_2_0());
			}
			    |
			(
				otherlv_3='{'
				{
					newLeafNode(otherlv_3, grammarAccess.getAttributeUsageAccess().getLeftCurlyBracketKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeUsageAccess().getElementsBaseElementParserRuleCall_2_1_1_0());
						}
						lv_elements_4_0=ruleBaseElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeUsageRule());
							}
							add(
								$current,
								"elements",
								lv_elements_4_0,
								"dut.control.sysmloc.SysMLOC.BaseElement");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_5='}'
				{
					newLeafNode(otherlv_5, grammarAccess.getAttributeUsageAccess().getRightCurlyBracketKeyword_2_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleTBD
entryRuleTBD returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTBDRule()); }
	iv_ruleTBD=ruleTBD
	{ $current=$iv_ruleTBD.current; }
	EOF;

// Rule TBD
ruleTBD returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTBDAccess().getTextQualifiedNameParserRuleCall_0_0());
				}
				lv_text_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTBDRule());
					}
					set(
						$current,
						"text",
						lv_text_0_0,
						"dut.control.sysmloc.SysMLOC.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getTBDAccess().getSemicolonKeyword_1_0());
			}
			    |
			(
				otherlv_2='{'
				{
					newLeafNode(otherlv_2, grammarAccess.getTBDAccess().getLeftCurlyBracketKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTBDAccess().getElementsBaseElementParserRuleCall_1_1_1_0());
						}
						lv_elements_3_0=ruleBaseElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTBDRule());
							}
							add(
								$current,
								"elements",
								lv_elements_3_0,
								"dut.control.sysmloc.SysMLOC.BaseElement");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_4='}'
				{
					newLeafNode(otherlv_4, grammarAccess.getTBDAccess().getRightCurlyBracketKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleName
entryRuleName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current.getText(); }
	EOF;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getNameAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_UNRESTRICTED_NAME_1=RULE_UNRESTRICTED_NAME
		{
			$current.merge(this_UNRESTRICTED_NAME_1);
		}
		{
			newLeafNode(this_UNRESTRICTED_NAME_1, grammarAccess.getNameAccess().getUNRESTRICTED_NAMETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleQualification
entryRuleQualification returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualificationRule()); }
	iv_ruleQualification=ruleQualification
	{ $current=$iv_ruleQualification.current.getText(); }
	EOF;

// Rule Qualification
ruleQualification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualificationAccess().getNameParserRuleCall_0());
		}
		this_Name_0=ruleName
		{
			$current.merge(this_Name_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='::'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualificationAccess().getColonColonKeyword_1());
		}
	)+
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getQualifiedNameAccess().getQualificationParserRuleCall_0());
			}
			this_Qualification_0=ruleQualification
			{
				$current.merge(this_Qualification_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_1());
		}
		this_Name_1=ruleName
		{
			$current.merge(this_Name_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

fragment RULE_DECIMAL_VALUE : '0'..'9' ('0'..'9')*;

RULE_EXP_VALUE : RULE_DECIMAL_VALUE ('e'|'E') ('+'|'-')? RULE_DECIMAL_VALUE;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UNRESTRICTED_NAME : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_STRING_VALUE : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_REGULAR_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ML_NOTE : '//*' ( options {greedy=false;} : . )*'*/';

RULE_SL_NOTE : '//' (~(('\n'|'\r')) ~(('\n'|'\r'))*)? ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
