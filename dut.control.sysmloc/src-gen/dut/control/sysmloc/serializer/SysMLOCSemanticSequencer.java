/*
 * generated by Xtext 2.38.0
 */
package dut.control.sysmloc.serializer;

import com.google.inject.Inject;
import dut.control.sysmloc.services.SysMLOCGrammarAccess;
import dut.control.sysmloc.sysMLOC.Comment;
import dut.control.sysmloc.sysMLOC.Import;
import dut.control.sysmloc.sysMLOC.Namespace;
import dut.control.sysmloc.sysMLOC.PartDefinition;
import dut.control.sysmloc.sysMLOC.PartUsage;
import dut.control.sysmloc.sysMLOC.SysMLOCPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SysMLOCSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SysMLOCGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLOCPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLOCPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case SysMLOCPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case SysMLOCPackage.NAMESPACE:
				sequence_Namespace(context, (Namespace) semanticObject); 
				return; 
			case SysMLOCPackage.PACKAGE:
				sequence_Package(context, (dut.control.sysmloc.sysMLOC.Package) semanticObject); 
				return; 
			case SysMLOCPackage.PART_DEFINITION:
				sequence_PartDefinition(context, (PartDefinition) semanticObject); 
				return; 
			case SysMLOCPackage.PART_USAGE:
				sequence_PartUsage(context, (PartUsage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Comment
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     body=REGULAR_COMMENT
	 * </pre>
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.COMMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.COMMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getBodyREGULAR_COMMENTTerminalRuleCall_1_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Import
	 *     Import returns Import
	 *
	 * Constraint:
	 *     (visibility=QualifiedName name=QualifiedName)
	 * </pre>
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.IMPORT__VISIBILITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.IMPORT__VISIBILITY));
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.IMPORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.IMPORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getVisibilityQualifiedNameParserRuleCall_0_0(), semanticObject.getVisibility());
		feeder.accept(grammarAccess.getImportAccess().getNameQualifiedNameParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Namespace returns Namespace
	 *
	 * Constraint:
	 *     packages+=Package+
	 * </pre>
	 */
	protected void sequence_Namespace(ISerializationContext context, Namespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Package
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (name=QualifiedName elements+=Type*)
	 * </pre>
	 */
	protected void sequence_Package(ISerializationContext context, dut.control.sysmloc.sysMLOC.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns PartDefinition
	 *     PartDefinition returns PartDefinition
	 *
	 * Constraint:
	 *     name=QualifiedName
	 * </pre>
	 */
	protected void sequence_PartDefinition(ISerializationContext context, PartDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.PART_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.PART_DEFINITION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPartDefinitionAccess().getNameQualifiedNameParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns PartUsage
	 *     PartUsage returns PartUsage
	 *
	 * Constraint:
	 *     name=QualifiedName
	 * </pre>
	 */
	protected void sequence_PartUsage(ISerializationContext context, PartUsage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.PART_USAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.PART_USAGE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPartUsageAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
