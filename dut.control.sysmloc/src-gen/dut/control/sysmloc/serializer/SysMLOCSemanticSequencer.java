/*
 * generated by Xtext 2.38.0
 */
package dut.control.sysmloc.serializer;

import com.google.inject.Inject;
import dut.control.sysmloc.services.SysMLOCGrammarAccess;
import dut.control.sysmloc.sysMLOC.AttributeDefinition;
import dut.control.sysmloc.sysMLOC.AttributeUsage;
import dut.control.sysmloc.sysMLOC.Comment;
import dut.control.sysmloc.sysMLOC.Namespace;
import dut.control.sysmloc.sysMLOC.NamespaceImport;
import dut.control.sysmloc.sysMLOC.PartDefinition;
import dut.control.sysmloc.sysMLOC.PartUsage;
import dut.control.sysmloc.sysMLOC.SysMLOCPackage;
import dut.control.sysmloc.sysMLOC.TBD;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SysMLOCSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SysMLOCGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SysMLOCPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SysMLOCPackage.ATTRIBUTE_DEFINITION:
				sequence_AttributeDefinition(context, (AttributeDefinition) semanticObject); 
				return; 
			case SysMLOCPackage.ATTRIBUTE_USAGE:
				sequence_AttributeUsage(context, (AttributeUsage) semanticObject); 
				return; 
			case SysMLOCPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case SysMLOCPackage.NAMESPACE:
				sequence_Namespace(context, (Namespace) semanticObject); 
				return; 
			case SysMLOCPackage.NAMESPACE_IMPORT:
				sequence_NamespaceImport(context, (NamespaceImport) semanticObject); 
				return; 
			case SysMLOCPackage.PACKAGE:
				sequence_Package(context, (dut.control.sysmloc.sysMLOC.Package) semanticObject); 
				return; 
			case SysMLOCPackage.PART_DEFINITION:
				sequence_PartDefinition(context, (PartDefinition) semanticObject); 
				return; 
			case SysMLOCPackage.PART_USAGE:
				sequence_PartUsage(context, (PartUsage) semanticObject); 
				return; 
			case SysMLOCPackage.TBD:
				sequence_TBD(context, (TBD) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     BaseElement returns AttributeDefinition
	 *     DefinitionElement returns AttributeDefinition
	 *     AttributeDefinition returns AttributeDefinition
	 *
	 * Constraint:
	 *     (declaredName=QualifiedName elements+=BaseElement*)
	 * </pre>
	 */
	protected void sequence_AttributeDefinition(ISerializationContext context, AttributeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BaseElement returns AttributeUsage
	 *     UsageElement returns AttributeUsage
	 *     NonOccurrenceUsageElement returns AttributeUsage
	 *     AttributeUsage returns AttributeUsage
	 *
	 * Constraint:
	 *     (declaredName=QualifiedName elements+=BaseElement*)
	 * </pre>
	 */
	protected void sequence_AttributeUsage(ISerializationContext context, AttributeUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BaseElement returns Comment
	 *     AnnotatingElement returns Comment
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     body=REGULAR_COMMENT
	 * </pre>
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.COMMENT__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.COMMENT__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentAccess().getBodyREGULAR_COMMENTTerminalRuleCall_1_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BaseElement returns NamespaceImport
	 *     ImportElement returns NamespaceImport
	 *     NamespaceImport returns NamespaceImport
	 *
	 * Constraint:
	 *     (visibility=QualifiedName declaredName=QualifiedName)
	 * </pre>
	 */
	protected void sequence_NamespaceImport(ISerializationContext context, NamespaceImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.NAMESPACE_IMPORT__VISIBILITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.NAMESPACE_IMPORT__VISIBILITY));
			if (transientValues.isValueTransient(semanticObject, SysMLOCPackage.Literals.NAMESPACE_IMPORT__DECLARED_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SysMLOCPackage.Literals.NAMESPACE_IMPORT__DECLARED_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNamespaceImportAccess().getVisibilityQualifiedNameParserRuleCall_0_0(), semanticObject.getVisibility());
		feeder.accept(grammarAccess.getNamespaceImportAccess().getDeclaredNameQualifiedNameParserRuleCall_2_0(), semanticObject.getDeclaredName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Namespace returns Namespace
	 *
	 * Constraint:
	 *     packages+=Package+
	 * </pre>
	 */
	protected void sequence_Namespace(ISerializationContext context, Namespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Package returns Package
	 *     BaseElement returns Package
	 *
	 * Constraint:
	 *     (declaredName=QualifiedName elements+=BaseElement*)
	 * </pre>
	 */
	protected void sequence_Package(ISerializationContext context, dut.control.sysmloc.sysMLOC.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BaseElement returns PartDefinition
	 *     DefinitionElement returns PartDefinition
	 *     PartDefinition returns PartDefinition
	 *
	 * Constraint:
	 *     (declaredName=QualifiedName elements+=BaseElement*)
	 * </pre>
	 */
	protected void sequence_PartDefinition(ISerializationContext context, PartDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PartUsage returns PartUsage
	 *
	 * Constraint:
	 *     (declaredName=QualifiedName elements+=BaseElement*)
	 * </pre>
	 */
	protected void sequence_PartUsage(ISerializationContext context, PartUsage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BaseElement returns TBD
	 *     TBD returns TBD
	 *
	 * Constraint:
	 *     (text=QualifiedName elements+=BaseElement*)
	 * </pre>
	 */
	protected void sequence_TBD(ISerializationContext context, TBD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
