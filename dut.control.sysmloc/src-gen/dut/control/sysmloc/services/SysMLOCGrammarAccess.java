/*
 * generated by Xtext 2.38.0
 */
package dut.control.sysmloc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SysMLOCGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.Namespace");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//Namespace returns Namespace:
		//    (packages+=Package)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(packages+=Package)*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }
		
		//Package
		public RuleCall getPackagesPackageParserRuleCall_0() { return cPackagesPackageParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPartUsageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPartDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//    Package | Comment | Import | PartUsage | PartDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//Package | Comment | Import | PartUsage | PartDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }
		
		//Import
		public RuleCall getImportParserRuleCall_2() { return cImportParserRuleCall_2; }
		
		//PartUsage
		public RuleCall getPartUsageParserRuleCall_3() { return cPartUsageParserRuleCall_3; }
		
		//PartDefinition
		public RuleCall getPartDefinitionParserRuleCall_4() { return cPartDefinitionParserRuleCall_4; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsTypeParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Package returns Package:
		//    'package' name=QualifiedName '{'
		//    (elements+=Type)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{'
		//(elements+=Type)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(elements+=Type)*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_3_0() { return cElementsTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyREGULAR_COMMENTTerminalRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Comment returns Comment:
		//    'doc' body = REGULAR_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//'doc' body = REGULAR_COMMENT
		public Group getGroup() { return cGroup; }
		
		//'doc'
		public Keyword getDocKeyword_0() { return cDocKeyword_0; }
		
		//body = REGULAR_COMMENT
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//REGULAR_COMMENT
		public RuleCall getBodyREGULAR_COMMENTTerminalRuleCall_1_0() { return cBodyREGULAR_COMMENTTerminalRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityQualifiedNameParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import returns Import:
		//    visibility=QualifiedName 'import' name=QualifiedName ';';
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=QualifiedName 'import' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//visibility=QualifiedName
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//QualifiedName
		public RuleCall getVisibilityQualifiedNameParserRuleCall_0_0() { return cVisibilityQualifiedNameParserRuleCall_0_0; }
		
		//'import'
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PartUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.PartUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PartUsage returns PartUsage:
		//   'part' name=QualifiedName ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'part' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'part'
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PartDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.PartDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PartDefinition returns PartDefinition:
		//   'part' 'def' name=QualifiedName ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'part' 'def' name=QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'part'
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNRESTRICTED_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* NAMES */
		//Name:
		//    ID | UNRESTRICTED_NAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | UNRESTRICTED_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//UNRESTRICTED_NAME
		public RuleCall getUNRESTRICTED_NAMETerminalRuleCall_1() { return cUNRESTRICTED_NAMETerminalRuleCall_1; }
	}
	public class QualificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.Qualification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Qualification :
		//    ( Name '::' )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( Name '::' )+
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualificationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName:
		//    Qualification? Name
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Qualification? Name
		public Group getGroup() { return cGroup; }
		
		//Qualification?
		public RuleCall getQualificationParserRuleCall_0() { return cQualificationParserRuleCall_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1() { return cNameParserRuleCall_1; }
	}
	
	
	private final NamespaceElements pNamespace;
	private final TypeElements pType;
	private final PackageElements pPackage;
	private final CommentElements pComment;
	private final ImportElements pImport;
	private final PartUsageElements pPartUsage;
	private final PartDefinitionElements pPartDefinition;
	private final NameElements pName;
	private final QualificationElements pQualification;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tDECIMAL_VALUE;
	private final TerminalRule tEXP_VALUE;
	private final TerminalRule tID;
	private final TerminalRule tUNRESTRICTED_NAME;
	private final TerminalRule tSTRING_VALUE;
	private final TerminalRule tREGULAR_COMMENT;
	private final TerminalRule tML_NOTE;
	private final TerminalRule tSL_NOTE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public SysMLOCGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pNamespace = new NamespaceElements();
		this.pType = new TypeElements();
		this.pPackage = new PackageElements();
		this.pComment = new CommentElements();
		this.pImport = new ImportElements();
		this.pPartUsage = new PartUsageElements();
		this.pPartDefinition = new PartDefinitionElements();
		this.pName = new NameElements();
		this.pQualification = new QualificationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tDECIMAL_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.DECIMAL_VALUE");
		this.tEXP_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.EXP_VALUE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.ID");
		this.tUNRESTRICTED_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.UNRESTRICTED_NAME");
		this.tSTRING_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.STRING_VALUE");
		this.tREGULAR_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.REGULAR_COMMENT");
		this.tML_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.ML_NOTE");
		this.tSL_NOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.SL_NOTE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dut.control.sysmloc.SysMLOC.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dut.control.sysmloc.SysMLOC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Namespace returns Namespace:
	//    (packages+=Package)*;
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//Type:
	//    Package | Comment | Import | PartUsage | PartDefinition;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Package returns Package:
	//    'package' name=QualifiedName '{'
	//    (elements+=Type)*
	//    '}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Comment returns Comment:
	//    'doc' body = REGULAR_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Import returns Import:
	//    visibility=QualifiedName 'import' name=QualifiedName ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//PartUsage returns PartUsage:
	//   'part' name=QualifiedName ';';
	public PartUsageElements getPartUsageAccess() {
		return pPartUsage;
	}
	
	public ParserRule getPartUsageRule() {
		return getPartUsageAccess().getRule();
	}
	
	//PartDefinition returns PartDefinition:
	//   'part' 'def' name=QualifiedName ';';
	public PartDefinitionElements getPartDefinitionAccess() {
		return pPartDefinition;
	}
	
	public ParserRule getPartDefinitionRule() {
		return getPartDefinitionAccess().getRule();
	}
	
	///* NAMES */
	//Name:
	//    ID | UNRESTRICTED_NAME
	//;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Qualification :
	//    ( Name '::' )+
	//;
	public QualificationElements getQualificationAccess() {
		return pQualification;
	}
	
	public ParserRule getQualificationRule() {
		return getQualificationAccess().getRule();
	}
	
	//QualifiedName:
	//    Qualification? Name
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	///* TERMINALS */
	//terminal DECIMAL_VALUE returns Ecore::EInt:
	//    '0'..'9' ('0'..'9')*;
	public TerminalRule getDECIMAL_VALUERule() {
		return tDECIMAL_VALUE;
	}
	
	//terminal EXP_VALUE:
	//    DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;
	public TerminalRule getEXP_VALUERule() {
		return tEXP_VALUE;
	}
	
	//terminal ID:
	//    ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal UNRESTRICTED_NAME returns Ecore::EString:
	//    '\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';
	public TerminalRule getUNRESTRICTED_NAMERule() {
		return tUNRESTRICTED_NAME;
	}
	
	//terminal STRING_VALUE returns Ecore::EString:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRING_VALUERule() {
		return tSTRING_VALUE;
	}
	
	//terminal REGULAR_COMMENT:
	//    '/*' ->'*/';
	public TerminalRule getREGULAR_COMMENTRule() {
		return tREGULAR_COMMENT;
	}
	
	//terminal ML_NOTE:
	//    '//*'->'*/';
	public TerminalRule getML_NOTERule() {
		return tML_NOTE;
	}
	
	//terminal SL_NOTE:
	//    '//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_NOTERule() {
		return tSL_NOTE;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
