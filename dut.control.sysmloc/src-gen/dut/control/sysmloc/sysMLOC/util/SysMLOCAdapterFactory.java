/**
 * generated by Xtext 2.38.0
 */
package dut.control.sysmloc.sysMLOC.util;

import dut.control.sysmloc.sysMLOC.AnnotatingElement;
import dut.control.sysmloc.sysMLOC.AttributeDefinition;
import dut.control.sysmloc.sysMLOC.AttributeUsage;
import dut.control.sysmloc.sysMLOC.BaseElement;
import dut.control.sysmloc.sysMLOC.Comment;
import dut.control.sysmloc.sysMLOC.DefinitionElement;
import dut.control.sysmloc.sysMLOC.ImportElement;
import dut.control.sysmloc.sysMLOC.Namespace;
import dut.control.sysmloc.sysMLOC.NamespaceImport;
import dut.control.sysmloc.sysMLOC.NonOccurrenceUsageElement;
import dut.control.sysmloc.sysMLOC.PartDefinition;
import dut.control.sysmloc.sysMLOC.PartUsage;
import dut.control.sysmloc.sysMLOC.SysMLOCPackage;
import dut.control.sysmloc.sysMLOC.TBD;
import dut.control.sysmloc.sysMLOC.UsageElement;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see dut.control.sysmloc.sysMLOC.SysMLOCPackage
 * @generated
 */
public class SysMLOCAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SysMLOCPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SysMLOCAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SysMLOCPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SysMLOCSwitch<Adapter> modelSwitch =
    new SysMLOCSwitch<Adapter>()
    {
      @Override
      public Adapter caseNamespace(Namespace object)
      {
        return createNamespaceAdapter();
      }
      @Override
      public Adapter casePackage(dut.control.sysmloc.sysMLOC.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter caseBaseElement(BaseElement object)
      {
        return createBaseElementAdapter();
      }
      @Override
      public Adapter caseAnnotatingElement(AnnotatingElement object)
      {
        return createAnnotatingElementAdapter();
      }
      @Override
      public Adapter caseImportElement(ImportElement object)
      {
        return createImportElementAdapter();
      }
      @Override
      public Adapter caseDefinitionElement(DefinitionElement object)
      {
        return createDefinitionElementAdapter();
      }
      @Override
      public Adapter caseUsageElement(UsageElement object)
      {
        return createUsageElementAdapter();
      }
      @Override
      public Adapter caseNonOccurrenceUsageElement(NonOccurrenceUsageElement object)
      {
        return createNonOccurrenceUsageElementAdapter();
      }
      @Override
      public Adapter caseNamespaceImport(NamespaceImport object)
      {
        return createNamespaceImportAdapter();
      }
      @Override
      public Adapter caseComment(Comment object)
      {
        return createCommentAdapter();
      }
      @Override
      public Adapter caseAttributeDefinition(AttributeDefinition object)
      {
        return createAttributeDefinitionAdapter();
      }
      @Override
      public Adapter casePartDefinition(PartDefinition object)
      {
        return createPartDefinitionAdapter();
      }
      @Override
      public Adapter caseAttributeUsage(AttributeUsage object)
      {
        return createAttributeUsageAdapter();
      }
      @Override
      public Adapter casePartUsage(PartUsage object)
      {
        return createPartUsageAdapter();
      }
      @Override
      public Adapter caseTBD(TBD object)
      {
        return createTBDAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.Namespace <em>Namespace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.Namespace
   * @generated
   */
  public Adapter createNamespaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.BaseElement <em>Base Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.BaseElement
   * @generated
   */
  public Adapter createBaseElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.AnnotatingElement <em>Annotating Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.AnnotatingElement
   * @generated
   */
  public Adapter createAnnotatingElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.ImportElement <em>Import Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.ImportElement
   * @generated
   */
  public Adapter createImportElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.DefinitionElement <em>Definition Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.DefinitionElement
   * @generated
   */
  public Adapter createDefinitionElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.UsageElement <em>Usage Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.UsageElement
   * @generated
   */
  public Adapter createUsageElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.NonOccurrenceUsageElement <em>Non Occurrence Usage Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.NonOccurrenceUsageElement
   * @generated
   */
  public Adapter createNonOccurrenceUsageElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.NamespaceImport <em>Namespace Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.NamespaceImport
   * @generated
   */
  public Adapter createNamespaceImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.Comment <em>Comment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.Comment
   * @generated
   */
  public Adapter createCommentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.AttributeDefinition <em>Attribute Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.AttributeDefinition
   * @generated
   */
  public Adapter createAttributeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.PartDefinition <em>Part Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.PartDefinition
   * @generated
   */
  public Adapter createPartDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.AttributeUsage <em>Attribute Usage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.AttributeUsage
   * @generated
   */
  public Adapter createAttributeUsageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.PartUsage <em>Part Usage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.PartUsage
   * @generated
   */
  public Adapter createPartUsageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dut.control.sysmloc.sysMLOC.TBD <em>TBD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dut.control.sysmloc.sysMLOC.TBD
   * @generated
   */
  public Adapter createTBDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SysMLOCAdapterFactory
