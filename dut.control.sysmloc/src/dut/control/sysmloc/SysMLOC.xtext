grammar dut.control.sysmloc.SysMLOC hidden(WS, ML_NOTE, SL_NOTE)

import "http://www.eclipse.org/emf/2002/Ecore" as Ecore

generate sysMLOC "http://www.control.dut/sysmloc/SysMLOC"
 
Namespace:
    (packages+=Package)*;

Package:
    'package' 
    declaredName=QualifiedName 
    '{' (elements+=BaseElement)* '}'
;
    
BaseElement:
    Package 
    | AnnotatingElement 
    | ImportElement
    | DefinitionElement
    | UsageElement
;

// Annotating

AnnotatingElement:
	Comment 
//	| Documentation
//	| TextualRepresentation
//	| MetadataUsage
;

// Importing

ImportElement:
	NamespaceImport
//	| MembershipImport
;

// Definitions

DefinitionElement:
	AttributeDefinition
//	| EnumerationDefinition
//	| OccurrenceDefinition
//	| IndividualDefinition
//	| ItemDefinition
//	| MetadataDefinition
	| PartDefinition
//	| ConnectionDefinition
//	| FlowConnectionDefinition
//	| InterfaceDefinition
//	| AllocationDefinition
//	| PortDefinition
//	| ActionDefinition
//	| CalculationDefinition
//	| StateDefinition
//	| ConstraintDefinition
//	| RequirementDefinition
//	| ConcernDefinition
//	| CaseDefinition
//	| AnalysisCaseDefinition
//	| VerificationCaseDefinition
//	| UseCaseDefinition
//	| ViewDefinition
//	| ViewpointDefinition
//	| RenderingDefinition
//	| ExtendedDefinition
;

// Usages

UsageElement:
	NonOccurrenceUsageElement 
//	| OccurrenceUsageElement
;

NonOccurrenceUsageElement:
	AttributeUsage
//	DefaultReferenceUsage
//	| ReferenceUsage
//	| AttributeUsage
//	| EnumerationUsage
//	| BindingConnectorAsUsage
//	| SuccessionAsUsage
//	| ExtendedUsage
	
;

//OccurrenceUsageElement: 
//	StructureUsageElement | BehaviorUsageElement
//;
//
//StructureUsageElement:
//	OccurrenceUsage
//	| IndividualUsage
//	| PortionUsage
//	| EventOccurrenceUsage
//	| ItemUsage
//	| PartUsage
//	| ViewUsage
//	| RenderingUsage
//	| PortUsage
//	| ConnectionUsage
//	| InterfaceUsage
//	| AllocationUsage
//	| Message
//	| FlowConnectionUsage
//	| SuccessionFlowConnectionUsage
//;
//
//BehaviorUsageElement:
//	ActionUsage
//	| CalculationUsage
//	| StateUsage
//	| ConstraintUsage
//	| RequirementUsage
//	| ConcernUsage
//	| CaseUsage
//	| AnalysisCaseUsage
//	| VerificationCaseUsage
//	| UseCaseUsage
//	| ViewpointUsage
//	| PerformActionUsage
//	| ExhibitStateUsage
//	| IncludeUseCaseUsage
//	| AssertConstraintUsage
//	| SatisfyRequirementUsage
//;


NamespaceImport:
    visibility=VisibilityIndicator 
    'import'
    declaredName=QualifiedName
    ';';
    
Comment:
    'doc' 
    body=REGULAR_COMMENT
;
    
AttributeDefinition:
	'attribute'
	'def'
	declaredName=QualifiedName
	(';' | '{' (elements+=BaseElement)* '}')
;

PartDefinition:
    'part'
	'def' 
	declaredName=QualifiedName ';'
	(';' | '{' (elements+=BaseElement)* '}')
;
   
AttributeUsage:
	'attribute'
	declaredName=QualifiedName
	(';' | '{' (elements+=BaseElement)* '}')
;

PartUsage:
   'part'
   	declaredName=QualifiedName
	(';' | '{' (elements+=BaseElement)* '}')
;

// enum

enum VisibilityIndicator:
	public = 'public' | private = 'private'| protected = 'protected'
;

/* NAMES */

Name:
	ID | UNRESTRICTED_NAME
;

Qualification :
	( Name '::' )+
;

QualifiedName:
	Qualification? Name
;

/* TERMINALS */

terminal DECIMAL_VALUE returns Ecore::EInt:
	'0'..'9' ('0'..'9')*;

terminal EXP_VALUE:
	DECIMAL_VALUE ('e' | 'E') ('+' | '-')? DECIMAL_VALUE;

terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal UNRESTRICTED_NAME returns Ecore::EString:
	'\'' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '\''))* '\'';

terminal STRING_VALUE returns Ecore::EString:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';

terminal REGULAR_COMMENT:
	'/*' -> '*/';

terminal ML_NOTE:
	'//*'-> '*/';

terminal SL_NOTE:
	'//' (!('\n' | '\r') !('\n' | '\r')*)? ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;